{"title":"cpp-return-value-optimization","slug":"cpp-return-value-optimization","date":"2025-05-28T08:23:00.000Z","updated":"2025-06-01T15:44:15.269Z","comments":true,"path":"api/articles/cpp-return-value-optimization.json","photos":[],"excerpt":"返回值优化是C++中的一种编译优化技术，它允许编译器将函数返回的对象直接构造到它们本来要存储的变量空间中而不产生临时对象。这样子可以减少复制构造和移动构造的次数，提升性能。","covers":null,"content":"<p>返回值优化是C++中的一种编译优化技术，它允许编译器将函数返回的对象直接构造到它们本来要存储的变量空间中而不产生临时对象。这样子可以减少复制构造和移动构造的次数，提升性能。</p>\n<span id=\"more\"></span>\n\n<p>严格来说返回值优化分为RVO（Return Value Optimization）和 NRVO（Named Return Value Optimization），不过在优化方法上的区别并不大。前者是未命名的临时对象（纯右值），后者是具名的对象（泛左值）。</p>\n<p>在C ++ 11标准中，这种优化技术被称为复制省略（copy elision）。如果使用GCC作为编译器，则这项优化技术是默认开启的，取消优化需要额外的编译参数 <code>-fno-elide-constructors</code> 。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">X</span>() { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X ctor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">X</span>(<span class=\"type\">const</span> X &amp;x) { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X copy ctor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    ~<span class=\"built_in\">X</span>() { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X dtor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">X <span class=\"title\">make_x</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    X x1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    X x2 = <span class=\"built_in\">make_x</span>();</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>可以看到函数 <code>make_x()</code> 返回了对象 <code>x1</code> 并赋值到 <code>x2</code> 上，理论上说这其中必定需要经过两次复制构造函数，第一次是 <code>x1</code> 复制到临时对象，第二次是临时对象复制到 <code>x2</code> 。</p>\n<p>加入编译参数 <code>-fno-elide-constructors</code> 后，用GCC编译并运行：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X ctor </span><br><span class=\"line\">X copy ctor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X copy ctor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X dtor</span><br></pre></td></tr></table></figure>\n\n<p>会发现和我们的预期一致。</p>\n<p>去掉编译参数后，用GCC编译并运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X ctor</span><br><span class=\"line\">X dtor</span><br></pre></td></tr></table></figure>\n\n<p>会发现，在RVO/NRVO的作用下，这段程序竟然一次复制构造都没有调用。减少了两次复制构造和析构。优化了性能。</p>\n<h2 id=\"RVO的失效\"><a href=\"#RVO的失效\" class=\"headerlink\" title=\"RVO的失效\"></a>RVO的失效</h2><p>由于RVO和NRVO是编译时优化，所以在编译期间无法确定的操作，编译器将不会进行RVO/NRVO优化。</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">X</span>() { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X ctor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">X</span>(<span class=\"type\">const</span> X &amp;x) { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X copy ctor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">X</span>() { </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X dtor\"</span> &lt;&lt; std::endl; </span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">X <span class=\"title\">make_x</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    X x1, x2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (std::<span class=\"built_in\">time</span>(<span class=\"literal\">nullptr</span>) % <span class=\"number\">50</span> == <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x1;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x2;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    X x3 = <span class=\"built_in\">make_x</span>();</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>现在 <code>make_x()</code> 函数无法在编译时确定返回哪个对象，所以就会有以下输出：<br><code>-fno-elide-constructors</code> 参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X ctor </span><br><span class=\"line\">X ctor </span><br><span class=\"line\">X copy ctor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X copy ctor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X dtor </span><br></pre></td></tr></table></figure>\n\n<p>无参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X ctor </span><br><span class=\"line\">X ctor </span><br><span class=\"line\">X copy ctor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X dtor </span><br><span class=\"line\">X dtor </span><br></pre></td></tr></table></figure>\n\n<p>这时只能省略一次复制构造。因为在示例代码中，到底是复制 <code>x1</code> 还是 <code>x2</code>，是无法在编译时确定的。因此编译器无法在默认构造阶段就对 <code>x3</code> 进行构造，它需要分别将x1和x2构造后，根据运行时的结果将 <code>x1</code> 或者 <code>x2</code> 复制构造到 <code>x3</code>。</p>\n<p>有兴趣的可以去<a href=\"https://cppinsights.io/%E7%94%9F%E6%88%90%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%9C%8B%E7%9C%8B%E3%80%82\">https://cppinsights.io/生成中间代码看看。</a></p>\n<p>此外，不要滥用移动。不要<code>return std::move(local)</code> 。返回局部变量会隐式地移动它。 显式的 <code>std::move</code> 总是不良的实践，因为它会阻碍可以把移动完全消除掉的返回值优化（RVO）。</p>\n<h2 id=\"RVO进化过程（C-11到C-20）\"><a href=\"#RVO进化过程（C-11到C-20）\" class=\"headerlink\" title=\"RVO进化过程（C++11到C++20）\"></a>RVO进化过程（C++11到C++20）</h2><h3 id=\"C-11\"><a href=\"#C-11\" class=\"headerlink\" title=\"C++11\"></a>C++11</h3><p>虽然 RVO/NRVO 可以省略创建临时对象和复制构造的过程，但是 C++11 标准规定复制构造函数必须是存在且可访问的，否则程序不符合语法规则。（这条规则在C++17被移除）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">X</span>() {</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X ctor\"</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">X</span>() {</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X dtor\"</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数设为私有</span></span><br><span class=\"line\">    <span class=\"built_in\">X</span>(<span class=\"type\">const</span> X&amp; x) {</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">\"X copy ctor\"</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">X <span class=\"title\">make_x</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">X</span>(); <span class=\"comment\">// 返回一个临时对象</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    X x2 = <span class=\"built_in\">make_x</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>我们将类X的复制构造函数设置为私有。根据返回值优化的要求，复制构造函数必须是可访问的，所以上面的代码在 C++11的编译环境下将会导致编译错误。</p>\n<p>C++11 加入了移动作为次优选，即使编译器没有执行 RVO/NRVO ，但是仍然可以通过移动而非拷贝来降低值返回的成本。</p>\n<h3 id=\"C-14\"><a href=\"#C-14\" class=\"headerlink\" title=\"C++14\"></a>C++14</h3><p>C++14 标准对返回值优化做了进一步的规定，规定中明确了对于常量表达式和常量初始化而言，编译器应该保证RVO，但是禁止NRVO。</p>\n<h3 id=\"C-17\"><a href=\"#C-17\" class=\"headerlink\" title=\"C++17\"></a>C++17</h3><p>新特性：强制拷贝省略（Guaranteed Copy Elision）</p>\n<p>对于某些特定类型的表达式（主要是纯右值 prvalue），编译器必须省略拷贝和移动操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyType x = <span class=\"built_in\">MyType</span>(); <span class=\"comment\">// MyType() 是 prvalue，x 直接在 MyType() 的位置构造</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MyType <span class=\"title\">func</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">MyType</span>(); <span class=\"comment\">// MyType() 是 prvalue，直接在调用者提供的内存中构造</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>C++17 将拷贝省略作为语义而非优化，这使得程序员可以依赖这一行为。</p>\n<p>例如，一个只有删除的拷贝/移动构造函数的类型，仍然可以通过这种方式从工厂函数返回。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NonCopyableNonMovable</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">NonCopyableNonMovable</span>() { std::cout &lt;&lt; <span class=\"string\">\"Constructed\\n\"</span>; }</span><br><span class=\"line\">    ~<span class=\"built_in\">NonCopyableNonMovable</span>() { std::cout &lt;&lt; <span class=\"string\">\"Destructed\\n\"</span>; }</span><br><span class=\"line\">    <span class=\"built_in\">NonCopyableNonMovable</span>(<span class=\"type\">const</span> NonCopyableNonMovable&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NonCopyableNonMovable</span>(NonCopyableNonMovable&amp;&amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NonCopyableNonMovable <span class=\"title\">factory</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">NonCopyableNonMovable</span>(); <span class=\"comment\">// C++17 起，这是合法的，会发生强制拷贝省略</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    NonCopyableNonMovable obj = <span class=\"built_in\">factory</span>(); <span class=\"comment\">// 对象直接在 obj 的内存中构造</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>在 C++17 之前，<code>factory()</code> 的调用通常是不合法的，因为 <code>NonCopyableNonMovable</code> 不可拷贝也不可移动。</p>\n<p>NRVO 仍然可选： 值得强调的是，强制拷贝省略主要适用于返回纯右值的情况。对于具名返回值优化 (NRVO)，即返回一个函数内的命名局部变量（<code>MyType obj; ... return obj;</code>），它仍然是可选的优化。这是因为 NRVO 的条件更复杂，例如函数可能有多个返回路径，返回不同的命名对象，或者对象的生命周期和构造方式使得直接在返回槽中构造更为困难。</p>\n<h3 id=\"C-20\"><a href=\"#C-20\" class=\"headerlink\" title=\"C++20\"></a>C++20</h3><p>对于协程中的 <code>co_return</code> 语句，如果返回的是一个 prvalue，也适用强制拷贝省略的规则。如果 <code>co_return</code> 一个局部变量，其行为也旨在尽可能优化，类似于 NRVO 的目标。</p>\n","categories":[],"tags":[{"name":"ZIYAN137","slug":"ZIYAN137","count":4,"path":"api/tags/ZIYAN137.json"},{"name":"cpp","slug":"cpp","count":3,"path":"api/tags/cpp.json"}]}